// // https://leetcode.com/problems/promise-time-limit/

// // Асинхронность 1.5

// // 2637. Срок действия обещания

// Учитывая асинхронную функцию  fn и время t в миллисекундах, вернуть новую  ограниченную по времени  версию входной функции. fnпринимает аргументы, предоставленные  ограниченной по времени  функции.

// Ограниченная по времени функция должна соответствовать следующим правилам:

// Если fnвыполнение завершается в течение лимита времени в tмиллисекундах, функция с ограничением по времени должна разрешиться с результатом.
// Если выполнение функции fnпревышает лимит времени, функция с ограничением по времени должна отклониться со строкой "Time Limit Exceeded".

// Пример 1:

// Вход:
// fn = асинхронный (n) => {
//   ждем нового обещания(res => setTimeout(res, 100));
//   вернуть n * n;
// }
// входы = [5]
// т = 50
// Вывод: {"rejected":"Превышен лимит времени","time":50}
//  Пояснение:
// const ограниченный = timeLimit(fn, t)
// const start = производительность.now()
// пусть результат;
// пытаться {
//    const res = await limited(...входные данные)
//    результат = {"решено": рез, "время": Math.floor(performance.now() - начало)};
// } поймать (ошибка) {
//    результат = {"отклонено": err, "время": Math.floor(performance.now() - start)};
// }
// console.log(результат) // Вывод

// Предоставленная функция настроена на разрешение через 100 мс. Однако ограничение по времени установлено на 50 мс. Она отклоняется при t=50 мс, поскольку достигнуто ограничение по времени.
// Пример 2:

// Вход:
// fn = асинхронный (n) => {
//   ждем нового обещания(res => setTimeout(res, 100));
//   вернуть n * n;
// }
// входы = [5]
// т = 150
// Вывод: {"resolved":25,"time":100}
//  Пояснение:
// Функция решена 5 * 5 = 25 при t=100 мс. Предел времени никогда не достигается.
// Пример 3:

// Вход:
// fn = асинхронный (a, b) => {
//   ждем нового обещания(res => setTimeout(res, 120));
//   вернуть а + б;
// }
// входы = [5,10]
// т = 150
// Вывод: {"resolved":15,"time":120}
//  Пояснение:
// ​​​​Функция разрешилась 5 + 10 = 15 при t=120 мс. Предел времени никогда не достигается.
// Пример 4:

// Вход:
// фн = асинхр () => {
//   выдать "Ошибку";
// }
// входы = []
// т = 1000
// Вывод: {"rejected":"Error","time":0}
//  Объяснение:
// Функция немедленно выдает ошибку.

// Ограничения:

// 0 <= inputs.length <= 10
// 0 <= t <= 1000
// fnвозвращает обещание

/**
 * @param {Function} fn
 * @param {number} t
 * @return {Function}
 */
var timeLimit = function (fn, t) {
  return async function (...args) {};
};

/**
 * const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100);
 * limited(150).catch(console.log) // "Time Limit Exceeded" at t=100ms
 */
